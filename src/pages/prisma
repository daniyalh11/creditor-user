generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model users {
  id                     String                  @id @default(uuid())
  first_name             String                  @db.VarChar(100)
  last_name              String                  @default("") @db.VarChar(100)
  email                  String                  @unique @db.VarChar(255)
  phone                  String                  @db.VarChar(15)
  password               String?                 @db.VarChar(255)
  auth_provider          auth_provider_enum      @default(local)
  provider_id            String?                 @unique @db.VarChar(300)
  gender                 gender_enum?    
  last_login             DateTime?               @db.Timestamptz(6)
  created_at             DateTime?               @default(now()) @db.Timestamptz(6)
  updated_at             DateTime?               @db.Timestamptz(6)
  image                  String?                 @db.VarChar(300)
  dob                    DateTime?
  bio                    String?
  deleted_at             DateTime?               @db.Timestamptz(6)
  location               String?                 @db.VarChar(150)
  createdBy              String?                 @db.VarChar(150)
  updatedBy              String?                 @db.VarChar(150)
  timezone               String                  @default("America/Los_Angeles") @db.VarChar(100)

  receiver               chat_message[]          @relation("receiver_messages")
  sender                 chat_message[]          @relation("sender_messages")
  conversations_sender   conversations[]         @relation("User1Conversations")
  conversations_receiver conversations[]         @relation("User2Conversations")
  group_messages_sent    group_message[]         @relation("UserMessages")
  course_admins          course_admins[]
  course_instructors     course_instructors[]
  course_reviews         course_reviews[]
  courses                courses[]
  logs                   logs[]
  notifications          notifications[]
  orders                 orders[]
  user_catalog_access    user_catalog_access[]
  user_course_access     user_course_access[]
  user_lesson_progress   user_lesson_progress[]
  user_module_progress   user_module_progress[]
  quiz_attempts          user_quiz_attempts[]
  user_roles             user_roles[]
  groups                 group_member[]
  posts                  group_post[]
  likes                  like[]
  comments               comment[]
  debate_participants    debate_participants[]
  debate_response        debate_response[]
  engagement             engagement[]
  events                 event[]                 @relation("EventCreator")
  eventParticipant       event_participant[]
  eventReminder          reminder[]
  support_tickets        support_ticket[]
  ticket_replies         ticket_reply[]
  certificates           certificates[]
  user_badges            user_badges[]
  essay_submission       essay_submissions[]
  assignment_submission  assignment_submission[]
  activity_log           activity_log[]
  user_course_progress   user_course_progress[]

  @@index([email])
  @@index([last_login])
}

model user_roles {
  user_id String
  role    role_enum
  user    users     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@id([user_id, role])
  @@index([user_id])
  @@index([role])
}

model orders {
  id             String        @id @default(uuid())
  user_id        String
  payments       payments?
  total_amount   Decimal       @db.Decimal(10, 2)
  order_date     DateTime?     @default(now()) @db.Timestamptz(6)
  updated_at     DateTime?     @default(now()) @db.Timestamptz(6)
  order_status   OrderStatus   @default(PENDING)
  payment_id     String?       @db.VarChar(150)
  payment_method String?       @db.VarChar(100)
  deleted_at     DateTime?     @db.Timestamptz(6)
  order_items    order_items[]
  user           users         @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([user_id])
  @@index([order_date])
}

model order_items {
  id         String  @id @default(uuid())
  order_id   String
  price      Decimal @db.Decimal(10, 2)
  catalog_id String? @map("catalogId")
  course_id  String? @map("courseId")
  createdBy  String? @db.VarChar(150)
  updatedBy  String? @db.VarChar(150)

  catalog catalogs? @relation(fields: [catalog_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  course  courses?  @relation(fields: [course_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  order   orders    @relation(fields: [order_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([order_id])
  @@index([course_id])
  @@index([catalog_id])
}

model payments {
  id               String        @id @default(uuid())
  order_id         String        @unique
  amount           Decimal       @db.Decimal(10, 2)
  status           PaymentStatus
  transaction_id   String?       @db.VarChar(100) // returned by gateway
  payment_method   String?       @db.VarChar(50) // card, UPI, etc.
  payment_url      String?
  gateway_response Json?
  created_at       DateTime      @default(now()) @db.Timestamptz(6)
  updated_at       DateTime      @default(now()) @db.Timestamptz(6)

  order orders @relation(fields: [order_id], references: [id], onDelete: Cascade)

  @@index([order_id])
  @@index([transaction_id])
}

model course_instructors {
  course_id String
  user_id   String
  isPrimary Boolean @default(false)
  course    courses @relation(fields: [course_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user      users   @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([course_id, user_id])
  @@index([course_id])
  @@index([user_id])
}

model course_admins {
  course_id String
  user_id   String
  course    courses @relation(fields: [course_id], references: [id], onDelete: Cascade)
  user      users   @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@id([course_id, user_id])
  @@index([course_id])
  @@index([user_id])
}

model catalogs {
  id                  String                @id @default(uuid())
  name                String                @unique @db.VarChar(100)
  description         String?               @db.VarChar(300)
  thumbnail           String?               @db.VarChar(300)
  created_at          DateTime?             @default(now()) @db.Timestamptz(6)
  updated_at          DateTime?             @default(now()) @db.Timestamptz(6)
  createdBy           String?               @db.VarChar(150)
  updatedBy           String?               @db.VarChar(150)
  catalog_courses     catalog_courses[]
  order_items         order_items[]
  user_catalog_access user_catalog_access[]

  @@index([name])
}

model catalog_courses {
  catalog_id String
  course_id  String
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  catalog    catalogs  @relation(fields: [catalog_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  course     courses   @relation(fields: [course_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([catalog_id, course_id])
  @@index([catalog_id])
  @@index([course_id])
}

model user_catalog_access {
  id                 String       @id @default(uuid())
  user_id            String
  catalog_id         String
  granted_by         GrantType    @default(MANUAL)
  subscription_start DateTime?    @default(now()) @db.Timestamptz(6)
  subscription_end   DateTime?    @db.Timestamptz(6)
  status             AccessStatus @default(ACTIVE)
  granted_on         DateTime?    @default(now()) @db.Timestamptz(6)
  catalog            catalogs     @relation(fields: [catalog_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user               users        @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([user_id])
  @@index([catalog_id])
}

model user_course_access {
  user_id            String
  course_id          String
  granted_by         GrantType    @default(MANUAL)
  subscription_start DateTime?    @default(now()) @db.Timestamptz(6)
  subscription_end   DateTime?    @db.Timestamptz(6)
  status             AccessStatus @default(ACTIVE)
  granted_on         DateTime?    @default(now()) @db.Timestamptz(6)
  course             courses      @relation(fields: [course_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user               users        @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([user_id, course_id])
  @@index([user_id, status])
  @@index([user_id])
  @@index([course_id])
}

model courses {
  id                   String                 @id @default(uuid())
  title                String                 @db.VarChar(150)
  description          String?
  learning_objectives  String[]
  isHidden             Boolean                @default(false)
  course_status        ContentStatus          @default(DRAFT)
  estimated_duration   String?
  max_students         Int?
  course_level         CourseLevel            @default(BEGINNER)
  instructor_id        String?
  courseType           CourseType             @default(SEQUENTIAL)
  deleted_at           DateTime?              @db.Timestamptz(6)
  lockModules          LockModules            @default(LOCKED)
  price                Decimal                @default(0.00) @db.Decimal(10, 2)
  requireFinalQuiz     Boolean                @default(true)
  thumbnail            String?                @db.VarChar(300)
  created_at           DateTime?              @default(now()) @db.Timestamptz(6)
  updated_at           DateTime?              @default(now()) @db.Timestamptz(6)
  createdBy            String?                @db.VarChar(150)
  updatedBy            String?                @db.VarChar(150)
  catalog_courses      catalog_courses[]
  chatbot_questions    chatbot_questions[]
  course_admins        course_admins[]
  course_instructors   course_instructors[]
  reviews              course_reviews[]
  instructor           users?                 @relation(fields: [instructor_id], references: [id], onUpdate: NoAction)
  modules              modules[]
  order_items          order_items[]
  user_course_access   user_course_access[]
  certificates         certificates[]
  event                event[]
         
  user_course_progress user_course_progress[]

  @@index([instructor_id])
  @@index([course_status])
}

model modules {
  id                   String                 @id @default(uuid())
  course_id            String
  title                String                 @db.VarChar(150)
  description          String?
  order                Int
  created_at           DateTime?              @default(now()) @db.Timestamptz(6)
  updated_at           DateTime?              @default(now()) @db.Timestamptz(6)
  estimated_duration   Int?
  module_status        ContentStatus          @default(DRAFT)
  thumbnail            String?                @db.VarChar(300)
  createdBy            String?                @db.VarChar(150)
  updatedBy            String?                @db.VarChar(150)
  course               courses                @relation(fields: [course_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  lessons              lessons[]
  quizzes              quizzes[]
  user_module_progress user_module_progress[]
  debates              debates[]
  assignment           assignments[]
  essay                essays[]
  resources            resource[]

  @@index([course_id])
}

model lessons {
  id                 String                 @id @default(uuid())
  title              String                 @db.VarChar(150)
  description        String?
  order              Int
  created_at         DateTime?              @default(now()) @db.Timestamptz(6)
  updated_at         DateTime?              @default(now()) @db.Timestamptz(6)
  lesson_status      ContentStatus          @default(DRAFT)
  createdBy          String?                @db.VarChar(150)
  updatedBy          String?                @db.VarChar(150)
  estimated_duration Int?
  chatbot_questions  chatbot_questions[]
  progress           user_lesson_progress[]

  lesson_blocks lesson_blocks[]
  module_id     String
  modules       modules         @relation(fields: [module_id], references: [id])
}

model resource {
  id            String       @id @default(uuid())
  group_id      String?
  module_id     String?
  uploaded_by   String
  resource_type ResourceType
  url           String       @db.VarChar(300)
  description   String?
  is_preview    Boolean      @default(false)
  duration      Int?
  file_size     Int?
  created_at    DateTime     @default(now()) @db.Timestamptz(6)
  updated_at    DateTime     @updatedAt @db.Timestamptz(6)
  groups        groups?      @relation(fields: [group_id], references: [id], onDelete: Cascade)
  modules       modules?     @relation(fields: [module_id], references: [id], onDelete: Cascade)

  @@index([group_id])
  @@index([module_id])
  @@index([resource_type])
}

model user_lesson_progress {
  id            String    @id @default(uuid())
  user_id       String
  lesson_id     String
  completed     Boolean   @default(false)
  completed_at  DateTime?
  created_at    DateTime? @default(now()) @db.Timestamptz(6)
  updated_at    DateTime? @default(now()) @db.Timestamptz(6)
  progress      Int       @default(0)
  last_accessed DateTime?
  lesson        lessons   @relation(fields: [lesson_id], references: [id], onDelete: Cascade)
  user          users     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id])
  @@index([lesson_id])
}

model user_module_progress {
  id            String    @id @default(uuid())
  user_id       String
  module_id     String
  completed     Boolean   @default(false)
  completed_at  DateTime?
  last_accessed DateTime?
  progress      Int       @default(0)
  module        modules   @relation(fields: [module_id], references: [id], onDelete: Cascade)
  user          users     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id])
  @@index([module_id])
}

model quizzes {
  id            String               @id @default(uuid())
  module_id     String
  title         String               @db.VarChar(150)
  type          QuizType             @default(GENERAL)
  maxAttempts   Int?                 @default(3)
  created_at    DateTime             @default(now()) @db.Timestamptz(6)
  updated_at    DateTime?            @default(now()) @db.Timestamptz(6)
  actions       Json?
  max_score     Int                  @default(100)
  min_score     Int                  @default(30)
  time_estimate Int?
  createdBy     String?              @db.VarChar(150)
  updatedBy     String?              @db.VarChar(150)
  questions     quiz_questions[]
  module        modules              @relation(fields: [module_id], references: [id], onDelete: Cascade)
  user_attempts user_quiz_attempts[]

  @@index([module_id])
}

model quiz_questions {
  id                String                    @id @default(uuid())
  quiz_id           String
  question          String                    @db.VarChar(300)
  options           Json?
  correct_answer    String                    @db.VarChar(300)
  created_at        DateTime?                 @default(now()) @db.Timestamptz(6)
  question_type     QuestionType              @default(MCQ)
  createdBy         String?                   @db.VarChar(150)
  updatedBy         String?                   @db.VarChar(150)
  question_score    Int?                      @default(3)
  question_options  question_options[]
  question_response quiz_question_responses[]
  quiz              quizzes                   @relation(fields: [quiz_id], references: [id], onDelete: Cascade)

  @@index([quiz_id])
}

model user_quiz_attempts {
  id            String                    @id @default(uuid())
  user_id       String
  quiz_id       String
  score         Int
  passed        Boolean
  attempt_date  DateTime                  @default(now()) @db.Timestamptz(6)
  remarks       String?
  submitted_at  DateTime?
  last_accessed DateTime?
  status        AssessmentStatus
  attempts      quiz_question_responses[]
  quiz          quizzes                   @relation(fields: [quiz_id], references: [id], onDelete: Cascade)
  user          users                     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id])
  @@index([quiz_id])
}

model question_options {
  id         String         @id @default(uuid())
  questionId String
  text       String         @db.VarChar(300)
  matchWith  String?        @db.VarChar(300)
  isCorrect  Boolean?
  created_at DateTime?      @default(now()) @db.Timestamptz(6)
  question   quiz_questions @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@index([questionId])
}

model quiz_question_responses {
  id         String             @id @default(uuid())
  attemptId  String
  questionId String
  selected   Json
  isCorrect  Boolean
  created_at DateTime?          @default(now()) @db.Timestamptz(6)
  attempt    user_quiz_attempts @relation(fields: [attemptId], references: [id], onDelete: Cascade)
  question   quiz_questions     @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@index([attemptId])
  @@index([questionId])
}

model logs {
  id          String   @id @default(uuid())
  user_id     String?
  action      String   @db.VarChar(100)
  entity      String   @db.VarChar(50)
  entity_id   String?  @db.VarChar(36)
  details     Json?
  ip_address  String?  @db.VarChar(45)
  device_info String?  @db.VarChar(200)
  timestamp   DateTime @default(now()) @db.Timestamptz(6)
  user        users?   @relation(fields: [user_id], references: [id])

  @@index([user_id])
  @@index([action])
  @@index([entity])
  @@index([timestamp])
}

model chatbot_sections {
  id         String              @id @default(uuid())
  name       String              @unique @db.VarChar(100)
  created_at DateTime?           @default(now()) @db.Timestamptz(6)
  questions  chatbot_questions[]

  @@index([name])
}

model chatbot_questions {
  id         String           @id @default(uuid())
  section_id String
  question   String           @db.VarChar(300)
  response   String           @db.VarChar(1000)
  created_at DateTime?        @default(now()) @db.Timestamptz(6)
  course_id  String?
  lesson_id  String?
  course     courses?         @relation(fields: [course_id], references: [id])
  lesson     lessons?         @relation(fields: [lesson_id], references: [id])
  section    chatbot_sections @relation(fields: [section_id], references: [id], onDelete: Cascade)

  @@index([section_id])
  @@index([course_id])
  @@index([lesson_id])
}

model contactus {
  id         String    @id @default(uuid())
  first_name String    @db.VarChar(50)
  last_name  String    @db.VarChar(50)
  email      String    @db.VarChar(100)
  message    String    @db.VarChar(300)
  created_at DateTime? @default(now()) @db.Timestamptz(6)

  @@index([email])
}

model course_reviews {
  id         String   @id @default(uuid())
  user_id    String
  course_id  String
  rating     Int
  comment    String?  @db.VarChar(500)
  created_at DateTime @default(now()) @db.Timestamptz(6)
  course     courses  @relation(fields: [course_id], references: [id], onDelete: Cascade)
  user       users    @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id])
  @@index([course_id])
}

model notifications {
  id           String    @id @default(uuid())
  user_id      String
  type         String
  title        String    @db.VarChar(150)
  message      String    @db.VarChar(500)
  read         Boolean   @default(false)
  created_at   DateTime  @default(now()) @db.Timestamptz(6)
  updated_at   DateTime  @updatedAt @db.Timestamptz(6)
  related_id   String?
  related_type String?
  email_sent   Boolean   @default(false)
  deleted_at   DateTime? @db.Timestamptz(6)
  user         users     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id])
  @@index([type])
  @@index([related_type, related_id])
}

model chat_message {
  id              String        @id @default(uuid())
  sender_id       String
  receiver_id     String
  content         String
  timeStamp       DateTime      @default(now()) @db.Timestamptz(6)
  conversation_id String
  conversation    conversations @relation(fields: [conversation_id], references: [conv_id], onDelete: Cascade)
  receiver        users         @relation("receiver_messages", fields: [receiver_id], references: [id], onDelete: Cascade)
  sender          users         @relation("sender_messages", fields: [sender_id], references: [id], onDelete: Cascade)
}

model conversations {
  conv_id      String         @id
  subject      String
  user1_id     String
  user2_id     String
  cov_messages chat_message[]
  user1        users          @relation("User1Conversations", fields: [user1_id], references: [id], onDelete: Cascade)
  user2        users          @relation("User2Conversations", fields: [user2_id], references: [id], onDelete: Cascade)
}

model assignments {
  id           String     @id @default(uuid())
  title        String     @db.VarChar(150)
  description  String?    @db.Text
  max_score    Int        @default(100)
  time_limit   Int
  difficulty   Difficulty @default(EASY)
  instructions Json
  created_by   String
  updated_by   String
  created_at   DateTime?  @default(now()) @db.Timestamptz(6)
  updated_at   DateTime?  @default(now()) @db.Timestamptz(6)
  end_date     DateTime?
  module_id    String
  module       modules    @relation(fields: [module_id], references: [id])

  questions   assignment_questions[]
  submissions assignment_submission[]
}

model assignment_submission {
  id               String        @id @default(uuid())
  assignment_id    String
  student_id       String
  url              String        @db.VarChar(500)
  additional_notes String?
  submitted_at     DateTime      @default(now())
  ontime           Boolean?
  grading_status   GradingStatus @default(PENDING)
  score            Int?
  feedback         String?
  last_accessed    DateTime?
  student          users         @relation(fields: [student_id], references: [id])
  assignment       assignments   @relation(fields: [assignment_id], references: [id])

  @@unique([assignment_id, student_id])
}

model assignment_questions {
  id            String      @id @default(uuid())
  question_text String
  points        Int
  minimum_words Int?
  maximum_words Int?
  assignment_id String
  assignment    assignments @relation(fields: [assignment_id], references: [id])
}

model groups {
  id          String   @id @default(cuid())
  name        String
  description String?
  created_by  String
  createdAt   DateTime @default(now())
  createdBy   String?  @db.VarChar(150)
  updatedBy   String?  @db.VarChar(150)

  members   group_member[]
  post      group_post[]
  messages  group_message[]
  events    event[]
  resources resource[]
}

model group_member {
  id        String    @id @default(cuid())
  user_id   String
  group_id  String
  role      GroupRole @default(LEARNER) // ADMIN, LEARNER
  joined_at DateTime  @default(now())

  user  users  @relation(fields: [user_id], references: [id], onDelete: Cascade)
  group groups @relation(fields: [group_id], references: [id], onDelete: Cascade)

  @@unique([user_id, group_id])
}

model group_post {
  id        String   @id @default(cuid())
  group_id  String
  user_id   String
  type      PostType @default(POST) // POST or ANNOUNCEMENT
  title     String? // Only for announcements
  content   String
  media_url String?
  is_pinned Boolean  @default(false) // Optional, useful for both types
  createdAt DateTime @default(now())

  group groups @relation(fields: [group_id], references: [id], onDelete: Cascade)
  user  users  @relation(fields: [user_id], references: [id], onDelete: Cascade)

  comments comment[]
  likes    like[]
}

model comment {
  id        String   @id @default(cuid())
  post_id   String
  user_id   String
  content   String
  createdAt DateTime @default(now())

  post group_post @relation(fields: [post_id], references: [id], onDelete: Cascade)
  user users      @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model like {
  id        String   @id @default(cuid())
  post_id   String
  user_id   String
  createdAt DateTime @default(now())

  post group_post @relation(fields: [post_id], references: [id], onDelete: Cascade)
  user users      @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([post_id, user_id])
}

model group_message {
  id        String      @id @default(cuid())
  group_id  String
  sender_id String
  content   String
  type      MessageType @default(TEXT)
  mime_type String?
  is_pinned Boolean     @default(false)
  timeStamp DateTime    @default(now())

  group  groups @relation(fields: [group_id], references: [id], onDelete: Cascade)
  sender users  @relation("UserMessages", fields: [sender_id], references: [id], onDelete: Cascade)
}

model debates {
  id          String    @id @default(uuid())
  module_id   String
  title       String
  statement   String
  instruction Json?
  status      String    @default("DRAFT")
  created_at  DateTime? @default(now()) @db.Timestamptz(6)
  updated_at  DateTime? @default(now()) @db.Timestamptz(6)
  createdBy   String?   @db.VarChar(150)
  updatedBy   String?   @db.VarChar(150)
  deleted_at  DateTime?
  start_date  DateTime?
  end_date    DateTime?
  total_marks Int

  module       modules               @relation(fields: [module_id], references: [id], onDelete: Cascade)
  statements   debate_response[]
  participants debate_participants[]

  @@index([module_id])
  @@index([status])
}

model debate_response {
  id         String    @id @default(uuid())
  debate_id  String
  text       String
  user_id    String
  marks      Int?
  feedback   String?
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  updated_at DateTime? @default(now()) @db.Timestamptz(6)

  debate     debates      @relation(fields: [debate_id], references: [id], onDelete: Cascade)
  user       users        @relation(fields: [user_id], references: [id], onDelete: Cascade)
  engagement engagement[]

  @@index([debate_id])
}

model debate_participants {
  id            String      @id @default(uuid())
  debate_id     String
  user_id       String
  group         DebateGroup
  joined_at     DateTime?   @default(now())
  submitted_at  DateTime?
  last_accessed DateTime?

  debate debates @relation(fields: [debate_id], references: [id], onDelete: Cascade)
  user   users   @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([debate_id, user_id])
  @@index([debate_id])
  @@index([user_id])
  @@index([group])
}

model engagement {
  id         String         @id @default(uuid())
  res_id     String
  user_id    String
  type       EngagementType
  created_at DateTime?      @default(now()) @db.Timestamptz(6)

  user     users           @relation(fields: [user_id], references: [id], onDelete: Cascade)
  response debate_response @relation(fields: [res_id], references: [id], onDelete: Cascade)

  @@unique([res_id, user_id])
  @@index([res_id])
  @@index([user_id])
  @@index([type])
}

model event {
  id                     String                     @id @default(cuid())
  title                  String
  description            String?
  startTime              DateTime
  endTime                DateTime
  location               String?
  isRecurring            Boolean                    @default(false)
  calendarType           CalendarType
  visibility             Visibility                 @default(PRIVATE)

  creatorId              String
  updatedBy              String?                    @db.VarChar(150)
  creator                users                      @relation("EventCreator", fields: [creatorId], references: [id])

  groupId                String?
  group                  groups?                    @relation(fields: [groupId], references: [id])
  course_id String?
  course                 courses?                   @relation(fields: [course_id], references: [id])

  recurrenceExceptions   recurrence_exception[]
  recurrenceRule         recurrence_rule[]
  participants           event_participant[]
  reminder               reminder[]
}


model recurrence_rule {
  id        String    @id @default(cuid())
  eventId   String    @unique
  frequency Frequency
  interval  Int       @default(1)
  byDay     String?
  endDate   DateTime?
  count     Int?

  event     event     @relation(fields: [eventId], references: [id], onDelete: Cascade)
}

model event_participant {
  id      String          @id @default(cuid())
  eventId String
  userId  String
  role    ParticipantRole @default(VIEWER)

  event event @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user  users @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([eventId, userId])
}

model reminder {
  id          String         @id @default(cuid())
  eventId     String
  userId      String?
  triggerTime DateTime
  method      ReminderMethod

  event event  @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user  users? @relation(fields: [userId], references: [id])
}

model essays {
  id            String              @id @default(uuid())
  title         String              @db.VarChar(150)
  description   String              @db.VarChar(400)
  max_points    Int
  time_limit    Int
  word_limit    Int
  difficulty    Difficulty          @default(EASY)
  essay_topic   String              @db.VarChar(400)
  passing_score Int                 @default(50)
  instructions  Json
  created_at    DateTime?           @default(now()) @db.Timestamptz(6)
  updated_at    DateTime?           @default(now()) @db.Timestamptz(6)
  end_date      DateTime?
  created_by    String
  updated_by    String
  module_id     String
  module        modules             @relation(fields: [module_id], references: [id])
  submission    essay_submissions[]
}

model essay_submissions {
  id           String   @id @default(uuid())
  text         String
  essay        essays   @relation(fields: [essay_id], references: [id])
  essay_id     String
  student      users    @relation(fields: [student_id], references: [id])
  student_id   String
  submitted_at DateTime @default(now())
  ontime       Boolean?
  time_spent   Int

  word_count     Int
  grading_status GradingStatus @default(PENDING)
  score          Int?
  feedback       String?
  last_accessed  DateTime?

  @@unique([essay_id, student_id])
}

model support_ticket {
  id          String         @id @default(uuid())
  student_id  String
  category    TicketCategory
  priority    TicketPriority
  subject     String
  description String
  attachments String? // JSON array of Cloudinary URLs
  status      TicketStatus   @default(PENDING)
  created_at  DateTime       @default(now()) @db.Timestamptz(6)
  updated_at  DateTime       @updatedAt @db.Timestamptz(6)

  student users          @relation(fields: [student_id], references: [id], onDelete: Cascade)
  replies ticket_reply[]

  @@index([student_id])
  @@index([status])
}

model ticket_reply {
  id         String   @id @default(uuid())
  ticket_id  String
  sender_id  String
  message    String
  created_at DateTime @default(now()) @db.Timestamptz(6)

  ticket support_ticket @relation(fields: [ticket_id], references: [id], onDelete: Cascade)
  sender users          @relation(fields: [sender_id], references: [id], onDelete: Cascade)

  @@index([ticket_id])
  @@index([sender_id])
}

model certificates {
  id             String   @id @default(uuid())
  user_id        String
  course_id      String
  issued_at      DateTime @default(now())
  certificateUrl String
  uniqueCode     String   @unique
  isActive       Boolean  @default(true)
  createdBy      String?  @db.VarChar(150)
  updatedBy      String?  @db.VarChar(150)

  user   users   @relation(fields: [user_id], references: [id])
  course courses @relation(fields: [course_id], references: [id])

  @@unique([user_id, course_id])
}

model badges {
  id          String            @id @default(uuid())
  title       String            @db.VarChar(150)
  criteria    String
  icon        String
  createdBy   String?           @db.VarChar(150)
  updatedBy   String?           @db.VarChar(150)
  category    BadgeCategoryEnum
  user_badges user_badges[]
}

model user_badges {
  id         String   @id @default(uuid())
  badge_id   String
  user_id    String
  issue_date DateTime @default(now())
  createdBy  String?  @db.VarChar(150)
  updatedBy  String?  @db.VarChar(150)

  badge badges @relation(fields: [badge_id], references: [id], onDelete: Cascade)
  user  users  @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id])
}

model activity_log {
  id        String         @id @default(uuid())
  userId    String
  action    ActivityAction
  targetId  String?
  createdAt DateTime       @default(now())

  user users @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([action])
  @@index([createdAt])
}

model block_types {
  id           String          @id @default(uuid())
  name         String
  template     templates[]
  lesson_block lesson_blocks[]
  created_at   DateTime        @default(now())
  updated_at   DateTime        @updatedAt
}

model templates {
  id            String          @id @default(uuid())
  block_type_id String          @map("block_type_id")
  block_type    block_types     @relation(fields: [block_type_id], references: [id])
  name          String
  content       String          @map("content") // HTML/CSS with dummy data
  fields        Json            @map("fields") // Input field definitions
  lesson_block  lesson_blocks[]
  created_at    DateTime        @default(now())
  updated_at    DateTime        @updatedAt
}

model lesson_blocks {
  id            String      @id @default(uuid())
  lesson_id     String      @map("lesson_id")
  block_type_id String      @map("block_type_id")
  template_id   String      @map("template_id")
  order         Int
  custom_data   Json        @map("custom_data") // User-provided data
  lesson        lessons     @relation(fields: [lesson_id], references: [id])
  block_type    block_types @relation(fields: [block_type_id], references: [id])
  template      templates   @relation(fields: [template_id], references: [id])
  created_at    DateTime    @default(now())
  updated_at    DateTime    @updatedAt

  @@unique([lesson_id, order])
}

model user_course_progress {
  id            String    @id @default(uuid())
  user_id       String
  course_id     String
  progress      Int       @default(0)
  completed     Boolean   @default(false)
  completed_at  DateTime?
  time_spent    Int?
  last_accessed DateTime?
  updated_at    DateTime  @updatedAt
  created_at    DateTime  @default(now())

  user   users   @relation(fields: [user_id], references: [id], onDelete: Cascade)
  course courses @relation(fields: [course_id], references: [id], onDelete: Cascade)

  @@unique([user_id, course_id])
  @@index([user_id])
  @@index([course_id])
}




model recurrence_exception{
 id                 String        @id @default(cuid())
 eventId            String
 occurrence_date    DateTime
 createdAt          DateTime      @default(now())
 UpdatedBy          String?
 event              event         @relation(fields: [eventId], references: [id], onDelete: Cascade)
 }
 






enum auth_provider_enum {
  local
  google
}

enum gender_enum {
  male
  female
  other
}

enum role_enum {
  user
  admin
  instructor
}

enum ResourceType {
  VIDEO
  PDF
  TRANSCRIPT
  AUDIO
  LINK
  IMAGE
  TEXT
  SCORM
}

enum OrderStatus {
  PENDING
  COMPLETED
  CANCELLED
  FAILED
  NOT_ATTEMPTED
}

enum ContentStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum AccessStatus {
  ACTIVE
  EXPIRED
  CANCELLED
}

enum GrantType {
  MANUAL
  PAYMENT
  PROMOTION
}

enum CourseType {
  SEQUENTIAL
  OPEN
}

enum LockModules {
  LOCKED
  UNLOCKED
}

enum QuizType {
  GENERAL
  FINAL
}

enum QuestionType {
  MCQ
  SCQ
  TRUE_FALSE
  ONE_WORD
  FILL_UPS
  DESCRIPTIVE
  MATCHING
}

enum AssessmentStatus {
  PENDING
  COMPLETED
}

enum MessageType {
  TEXT
  IMAGE
  VIDEO
  AUDIO
  FILE
}

enum GroupRole {
  ADMIN
  LEARNER
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

enum PostType {
  POST
  ANNOUNCEMENT
}

enum VoteType {
  FOR
  AGAINST
  SUPPORT
}

enum EngagementType {
  LIKE
  DISLIKE
}

enum DebateGroup {
  FOR
  AGAINST
}

enum CalendarType {
  PERSONAL
  GROUP
  COURSE
}

enum Visibility {
  PRIVATE
  SHARED
  PUBLIC
}

enum Frequency {
  DAILY
  WEEKLY
  MONTHLY
  YEARLY
}

enum ParticipantRole {
  HOST
  EDITOR
  VIEWER
}

enum ReminderMethod {
  EMAIL
  PUSH
}

enum GradingStatus {
  GRADED
  PENDING
}

enum TicketCategory {
  TECHNICAL_SUPPORT
  BILLING_PAYMENTS
  ACCOUNT_ISSUES
  COURSE_CONTENT
  OTHER
}

enum TicketPriority {
  LOW
  MEDIUM
  HIGH
}

enum TicketStatus {
  PENDING
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum PaymentStatus {
  SUCCESS
  FAILED
  PENDING
}

enum ActivityAction {
  USER_LOGIN
  USER_LOGOUT
  PROFILE_UPDATED
  COURSE_COMPLETED
  LESSON_OPENED
  LESSON_COMPLETED
  QUIZ_STARTED
  QUIZ_COMPLETED
  ASSIGNMENT_SUBMITTED
  COMMENT_POSTED
  DEBATE_PARTICIPATED
  DEBATE_SUBMITTED
  ESSAY_SUBMITTED
  MESSAGE_SENT
  CERTIFICATE_EARNED
  BADGE_EARNED
}

enum BadgeCategoryEnum {
  COMPLETION
  EXCELLENCE
  ONE_TIME
  PARTICIPATION
  CUSTOM
}

enum CourseLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCE
}